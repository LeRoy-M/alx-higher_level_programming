>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
    raise Exception("area() is not implemented")
Exception: area() is not implemented

>>> bg.integer_validator("Best School", 98)

>>> bg.integer_validator("negative", -1)
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
ValueError: negative must be greater than 0

>>> bg.integer_validator("zero", 0)
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
ValueError: zero must be greater than 0

>>> bg.integer_validator("number", None)
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: number must be an integer

>>> bg.integer_validator("new", {3, 4})
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: new must be an integer

>>> bg.integer_validator("boolean", True)
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: boolean must be an integer

>>> bg.integer_validator("list", [5])
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: list must be an integer

>>> bg.integer_validator("tuple", (7, ))
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: tuple must be an integer

>>> bg.integer_validator("string", "12")
Traceback (most recent call last):
    raise TypeError(f"{name} must be an integer")
TypeError: string must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
    bg.integer_validator()
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
